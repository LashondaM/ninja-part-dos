{"version":3,"sources":["Ninjas.js","AddNinja.js","App.js","serviceWorker.js","index.js"],"names":["Ninjas","ponchos","deleteMe","ninjaList","map","ninja","age","className","key","id","name","brace","onClick","AddNinja","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","foot","onSubmit","this","htmlFor","type","onChange","Component","App","ninjaBoyz","taste","york","Math","random","yorks","deleteNinja","oreo","filter","console","log","prevProps","prevState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uPAsCmBA,G,MAnCJ,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,SACZC,EAAYF,EAAQG,KAAI,SAAAC,GAC1B,OAAIA,EAAMC,IAAM,GAEhB,yBAAKC,UAAU,QAAQC,IAAKH,EAAMI,IAC9B,sCAAaJ,EAAMK,MACnB,qCAAYL,EAAMC,KAClB,uCAAcD,EAAMM,OACpB,4BAAQC,QAAS,WAAOV,EAASG,EAAMI,MAAvC,iBAIG,QAKX,OAEC,yBAAKF,UAAU,cACbJ,K,OCWIU,E,4MA/BXC,MAAQ,CACJJ,KAAM,KACNJ,IAAK,KACLK,MAAO,M,EAEXI,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOT,GAAKO,EAAEE,OAAOC,S,EAGhCC,aAAe,SAACJ,GACZA,EAAEK,iBACF,EAAKC,MAAMC,KAAK,EAAKT,Q,uDAGrB,OACI,6BACI,0BAAMU,SAAUC,KAAKL,cACjB,2BAAOM,QAAQ,QAAf,SACA,2BAAOC,KAAK,OAAOlB,GAAG,OAAOmB,SAAUH,KAAKV,eAC5C,2BAAOW,QAAQ,OAAf,QACA,2BAAOC,KAAK,OAAOlB,GAAG,MAAMmB,SAAUH,KAAKV,eAC3C,2BAAOW,QAAQ,QAAf,UACA,2BAAOC,KAAK,OAAOlB,GAAG,QAAQmB,SAAUH,KAAKV,eAC7C,gD,GAzBGc,aC8CRC,E,4MA3CbhB,MAAQ,CAENiB,UAAY,CACV,CAAErB,KAAM,OAAQJ,IAAK,GAAIK,MAAO,OAAQF,GAAI,GAC5C,CAAEC,KAAM,QAASJ,IAAK,GAAIK,MAAO,OAAQF,GAAI,GAC7C,CAAEC,KAAM,KAAMJ,IAAK,GAAIK,MAAO,SAAUF,GAAI,K,EAGhDuB,MAAQ,SAACC,GACPA,EAAKxB,GAAKyB,KAAKC,SACf,IAAIC,EAAK,sBAAO,EAAKtB,MAAMiB,WAAlB,CAA6BE,IACtC,EAAKhB,SAAS,CACZc,UAAWK,K,EAGfC,YAAc,SAAC5B,GACb,IAAI6B,EAAO,EAAKxB,MAAMiB,UAAUQ,QAAO,SAAAlC,GACrC,OAAOA,EAAMI,KAAOA,KAEtB,EAAKQ,SAAS,CACZc,UAAWO,K,kEAIbE,QAAQC,IAAI,uB,yCAEKC,EAAWC,GAC5BH,QAAQC,IAAI,qBACZD,QAAQC,IAAIC,EAAWC,K,+BAGvB,OACE,yBAAKpC,UAAU,OACb,iDACA,8CAEA,kBAAC,EAAD,CAAQL,SAAUuB,KAAKY,YAAapC,QAASwB,KAAKX,MAAMiB,YACxD,kBAAC,EAAD,CAAUR,KAAME,KAAKO,a,GAtCXH,aCQEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.4e5b9e1a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Ninjas.css'\r\n\r\nconst Ninjas = ({ponchos, deleteMe}) => {\r\n        const ninjaList = ponchos.map(ninja => {\r\n            if (ninja.age > 20){\r\n            return (\r\n            <div className=\"ninja\" key={ninja.id}>\r\n                <div>Name: { ninja.name }</div>\r\n                <div>Age: { ninja.age }</div>\r\n                <div>Brace: { ninja.brace }</div>\r\n                <button onClick={() => {deleteMe(ninja.id)}}>Delete Ninja</button>\r\n            </div>\r\n            )\r\n        } else {\r\n            return null\r\n        }\r\n        })\r\n        \r\n\r\n        return(\r\n         // ninja-list is not the same as ninjaList\r\n         <div className=\"ninja-list\">\r\n         { ninjaList }\r\n         </div>\r\n        )\r\n    }\r\n            //  ponchos.map(ninja => {\r\n            //     return ninja.age > 20 ? (<div className=\"ninja\" key={ninja.id}>\r\n            //      <div>Name: { ninja.name }</div>\r\n            //          <div>Age: { ninja.age }</div>\r\n            //          <div>Brace: { ninja.brace }</div>\r\n            //      </div>\r\n            //  ) : null;\r\n            // })\r\n    \r\n\r\n\r\n    export default Ninjas\r\n\r\n\r\n    //below this line is the old notse from the react and redux videos from The Net Ninja #14 and below.\r\n\r\n// props = properties, props are what's listed in this <Ninjas name=\"Eddy\" age=\"12\"  brace=\"Pink\"/> tag\r\n\r\n// ninjaList is the name of the new array\r\n        //ninja is the className of the div below. For each ninja inside the original array, it's returning a bit of template for that ninja when it's getting mapped to the new array. One set of JSX for each individual ninja.\r\n        // ponchos is what the map method goes inside of to map through the ninjaBoyz array","import React, {Component} from 'react'\r\n\r\nclass AddNinja extends Component {\r\n    state = {\r\n        name: null,\r\n        age: null,\r\n        brace: null\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.foot(this.state);\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label htmlFor=\"name\">Name:</label>\r\n                    <input type=\"text\" id=\"name\" onChange={this.handleChange} />\r\n                    <label htmlFor=\"age\">Age:</label>\r\n                    <input type=\"text\" id=\"age\" onChange={this.handleChange} />\r\n                    <label htmlFor=\"name\">Brace:</label>\r\n                    <input type=\"text\" id=\"brace\" onChange={this.handleChange} />\r\n                    <button>Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddNinja","import React, {Component} from 'react';\nimport Ninjas from './Ninjas';\nimport AddNinja from './AddNinja';\n\nclass App extends Component {\n  state = {\n    // ninjaBoyz is the name of the original array\n    ninjaBoyz : [\n      { name: 'Eddy', age: 27, brace: 'blue', id: 1},\n      { name: 'EdBoy', age: 36, brace: 'aqua', id: 2},\n      { name: 'Ed', age: 15, brace: 'maroon', id: 3}\n    ]\n  }\n  taste = (york) => {\n    york.id = Math.random();\n    let yorks = [...this.state.ninjaBoyz, york]\n    this.setState({\n      ninjaBoyz: yorks\n    })\n  }\n  deleteNinja = (id) => {\n    let oreo = this.state.ninjaBoyz.filter(ninja => {\n      return ninja.id !== id\n    });\n    this.setState({\n      ninjaBoyz: oreo\n    })\n  }\n  componentDidMount(){\n    console.log('component mounted')\n  }\n  componentDidUpdate(prevProps, prevState){\n    console.log('Component Updated');\n    console.log(prevProps, prevState)\n  }\n  render() {\n    return(\n      <div className=\"App\">\n        <h1>My first Boy Fran</h1>\n        <p>u aint welcome!</p>\n        {/* // ponchos is the name that was given propities in the <Ninjas /> tag */}\n        <Ninjas deleteMe={this.deleteNinja} ponchos={this.state.ninjaBoyz} />\n        <AddNinja foot={this.taste}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}